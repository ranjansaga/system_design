React Fiber Node
A Fiber Node is a JavaScript object that holds all the necessary metadata for rendering and updating that component.
js
Copy
Edit
FiberNode = {
  type,               // Component type (function/class/div etc.)
  key,                // Key for list reconciliation
  pendingProps,       // New props for upcoming render
  memoizedProps,      // Props used during last render
  memoizedState,      // ðŸŒŸ Component state or hook state list
  return,             // Parent fiber
  child,              // First child fiber
  sibling,            // Next sibling fiber
  stateNode,          // Host DOM node or class component instance
  alternate,          // Link to old fiber (for diffing)
  updateQueue,        // ðŸŒŸ Queued updates (like setState calls)
  flags,              // Side-effect tracking
}
Where Are Hooks and States Stored?
ðŸ”— 1. Hooks: Stored as a linked list on the fiber
On function components, React keeps a memoizedState on the fiber which points to the first hook node.

Each hook node is an object like:

js
Copy
Edit
hook = {
  memoizedState,   // current state value
  baseState,       // base state for useReducer
  queue,           // update queue (pending setState calls)
  next,            // next hook in the chain
}
They form a linked list like:

txt
Copy
Edit
fiber.memoizedState â†’ hook1 â†’ hook2 â†’ hook3 â†’ null
Component Fiber Visual Representation
txt
Copy
Edit
Component Fiber
|
|-- memoizedState (points to first hook)
     |
     â”œâ”€ Hook 1 (useState)
     |     â”œâ”€ memoizedState: 42
     |     â””â”€ next â†’
     |
     â”œâ”€ Hook 2 (useEffect)
     |     â”œâ”€ memoizedState: { deps: [...] }
     |     â””â”€ next â†’
     |
     â””â”€ Hook 3 (useRef)
           â””â”€ memoizedState: { current: ... }
Summary
Each function component gets a Fiber Node

Its memoizedState holds a linked list of hook objects

Each hook object stores its own memoizedState (actual state) and an updateQueue

React walks this list during every render in order to keep state consistent
